# Generated by Django 2.0 on 2018-01-16 00:18

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biz_transaction', models.CharField(help_text='The business transaction.', max_length=200, verbose_name='Business Transaction')),
                ('type', models.CharField(help_text='The type of business transaction.', max_length=200, null=True, verbose_name='Type')),
            ],
            options={
                'verbose_name_plural': 'Business Transactions',
                'verbose_name': 'Business Transaction',
            },
        ),
        migrations.CreateModel(
            name='Destination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='The source type.', max_length=150, verbose_name='Type')),
                ('destination', models.CharField(help_text='The Destination identifier.', max_length=150, verbose_name='Destination')),
            ],
            options={
                'verbose_name_plural': 'Destinations',
                'verbose_name': 'Destination',
            },
        ),
        migrations.CreateModel(
            name='EPCISEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID', primary_key=True, serialize=False, verbose_name='Unique ID')),
                ('event_time', models.DateTimeField(db_index=True, editable=False, help_text='The date and time at which the EPCIS Capturing Application asserts the event occurred.', verbose_name='Event Time')),
                ('event_timezone_offset', models.CharField(default='+00:00', help_text='The time zone offset in effect at the time and place the event occurred, expressed as an offset from UTC', max_length=6, null=True, verbose_name='Event Timezone Offset')),
                ('record_time', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time at which this event was recorded by an EPCIS Repository.', null=True, verbose_name='Record Time')),
                ('event_id', models.CharField(help_text='An identifier for this event as specified by the capturing application, globally unique across all events other than error declarations. Not to be confused with the unique id/primary key for events within a database.', max_length=150, null=True, verbose_name='Event ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ErrorDeclaration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('declaration_time', models.DateTimeField(default=django.utils.timezone.now, help_text='The time at which the error was declared.', verbose_name='Declaration Time')),
                ('reason', models.CharField(help_text='The reason for the error.', max_length=150, null=True, verbose_name='Reason')),
                ('corrective_event_ids', models.TextField(help_text='A delimited list of EPCIS event ids.', verbose_name='Corrective Event IDs')),
            ],
            options={
                'verbose_name_plural': 'Error Declarations',
                'verbose_name': 'Error Declaration',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID', primary_key=True, serialize=False, verbose_name='Unique ID')),
                ('action', models.CharField(choices=[('ADD', 'Add'), ('OBSERVE', 'Observe'), ('DELETE', 'Delete')], help_text='How this event relates to the lifecycle of the EPCs named in this event.', max_length=5, verbose_name='Action')),
                ('biz_step', models.CharField(help_text='The business step of which this event was a part.', max_length=150, null=True, verbose_name='Business Step')),
                ('disposition', models.CharField(help_text='The business condition of the objects associated with the EPCs, presumed to hold true until contradicted by a subsequent event..', max_length=150, null=True, verbose_name='Disposition')),
                ('read_point', models.CharField(help_text='The read point at which the event took place.', max_length=150, null=True, verbose_name='Read Point')),
                ('biz_location', models.CharField(help_text='The business location where the objects associated with the EPCs may be found, until contradicted by a subsequent event.', max_length=150, null=True, verbose_name='Business Location')),
                ('type', models.CharField(choices=[('ag', 'Aggregation'), ('ob', 'Object'), ('tx', 'Transaction'), ('tf', 'Transformation')], help_text='The type of event.', max_length=2, verbose_name='Event Type')),
            ],
            options={
                'verbose_name_plural': 'Events',
                'verbose_name': 'Event',
            },
        ),
        migrations.CreateModel(
            name='InstanceLotMasterData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the ILMD entry.', max_length=150, verbose_name='Name')),
                ('value', models.CharField(help_text='The value of the ILMD entry.', max_length=255, verbose_name='Value')),
                ('event', models.ForeignKey(help_text='The source event.', on_delete=django.db.models.deletion.CASCADE, to='quartet_epcis.Event', verbose_name='Event')),
            ],
            options={
                'verbose_name_plural': 'ILMD Entries',
                'verbose_name': 'ILMD Entry',
            },
        ),
        migrations.CreateModel(
            name='QuantityElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epc_class', models.CharField(help_text='The EPC class.', max_length=200, verbose_name='EPC Class')),
                ('quantity', models.FloatField(help_text='The Quantity value.', verbose_name='Quantity')),
                ('uom', models.CharField(help_text='The unit of measure relative to the quantity.', max_length=150, null=True, verbose_name='Unit of Measure (UOM)')),
                ('event', models.ForeignKey(help_text='The source event.', on_delete=django.db.models.deletion.CASCADE, to='quartet_epcis.Event', verbose_name='Event')),
            ],
            options={
                'verbose_name_plural': 'Quantity Elements',
                'verbose_name': 'Quantity Element',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='The source type.', max_length=150, verbose_name='Type')),
                ('source', models.CharField(help_text='The source identifier.', max_length=150, verbose_name='Source')),
                ('event', models.ForeignKey(help_text='The source event.', on_delete=django.db.models.deletion.CASCADE, to='quartet_epcis.Event', verbose_name='Event')),
            ],
            options={
                'verbose_name_plural': 'Sources',
                'verbose_name': 'Source',
            },
        ),
        migrations.CreateModel(
            name='TransformationID',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID', primary_key=True, serialize=False, verbose_name='Unique ID')),
                ('action', models.CharField(choices=[('ADD', 'Add'), ('OBSERVE', 'Observe'), ('DELETE', 'Delete')], help_text='How this event relates to the lifecycle of the EPCs named in this event.', max_length=5, verbose_name='Action')),
                ('biz_step', models.CharField(help_text='The business step of which this event was a part.', max_length=150, null=True, verbose_name='Business Step')),
                ('disposition', models.CharField(help_text='The business condition of the objects associated with the EPCs, presumed to hold true until contradicted by a subsequent event..', max_length=150, null=True, verbose_name='Disposition')),
                ('read_point', models.CharField(help_text='The read point at which the event took place.', max_length=150, null=True, verbose_name='Read Point')),
                ('biz_location', models.CharField(help_text='The business location where the objects associated with the EPCs may be found, until contradicted by a subsequent event.', max_length=150, null=True, verbose_name='Business Location')),
                ('identifier', models.CharField(help_text='The Transformation event ID.', max_length=150, verbose_name='TransformationID')),
                ('event', models.ForeignKey(help_text='The source event.', on_delete=django.db.models.deletion.CASCADE, to='quartet_epcis.Event', verbose_name='Event')),
            ],
            options={
                'verbose_name_plural': 'Transformation IDs',
                'verbose_name': 'Transformation ID',
            },
        ),
        migrations.AddField(
            model_name='errordeclaration',
            name='event',
            field=models.ForeignKey(help_text='The source event.', on_delete=django.db.models.deletion.CASCADE, to='quartet_epcis.Event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='destination',
            name='event',
            field=models.ForeignKey(help_text='The source event.', on_delete=django.db.models.deletion.CASCADE, to='quartet_epcis.Event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='businesstransaction',
            name='event',
            field=models.ForeignKey(help_text='The source event.', on_delete=django.db.models.deletion.CASCADE, to='quartet_epcis.Event', verbose_name='Event'),
        ),
    ]
