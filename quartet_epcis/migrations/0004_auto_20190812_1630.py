# Generated by Django 2.2.3 on 2019-08-12 16:30

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('quartet_epcis', '0003_auto_20181031_1420'),
    ]

    operations = [
        migrations.AlterField(
            model_name='event',
            name='biz_location',
            field=models.CharField(blank=True, help_text='The business location where the objects associated with the EPCs may be found, until contradicted by a subsequent event.', max_length=150, null=True, verbose_name='Business Location'),
        ),
        migrations.AlterField(
            model_name='event',
            name='biz_step',
            field=models.CharField(blank=True, choices=[('urn:epcglobal:cbv:bizstep:accepting', 'urn:epcglobal:cbv:bizstep:accepting'), ('urn:epcglobal:cbv:bizstep:arriving', 'urn:epcglobal:cbv:bizstep:arriving'), ('urn:epcglobal:cbv:bizstep:assembling', 'urn:epcglobal:cbv:bizstep:assembling'), ('urn:epcglobal:cbv:bizstep:collecting', 'urn:epcglobal:cbv:bizstep:collecting'), ('urn:epcglobal:cbv:bizstep:commissioning', 'urn:epcglobal:cbv:bizstep:commissioning'), ('urn:epcglobal:cbv:bizstep:consigning', 'urn:epcglobal:cbv:bizstep:consigning'), ('urn:epcglobal:cbv:bizstep:creating_class_instance', 'urn:epcglobal:cbv:bizstep:creating_class_instance'), ('urn:epcglobal:cbv:bizstep:cycle_counting', 'urn:epcglobal:cbv:bizstep:cycle_counting'), ('urn:epcglobal:cbv:bizstep:decommissioning', 'urn:epcglobal:cbv:bizstep:decommissioning'), ('urn:epcglobal:cbv:bizstep:departing', 'urn:epcglobal:cbv:bizstep:departing'), ('urn:epcglobal:cbv:bizstep:destroying', 'urn:epcglobal:cbv:bizstep:destroying'), ('urn:epcglobal:cbv:bizstep:disassembling', 'urn:epcglobal:cbv:bizstep:disassembling'), ('urn:epcglobal:cbv:bizstep:dispensing', 'urn:epcglobal:cbv:bizstep:dispensing'), ('urn:epcglobal:cbv:bizstep:entering_exit', 'urn:epcglobal:cbv:bizstep:entering_exit'), ('urn:epcglobal:cbv:bizstep:ingholding', 'urn:epcglobal:cbv:bizstep:ingholding'), ('urn:epcglobal:cbv:bizstep:inspecting', 'urn:epcglobal:cbv:bizstep:inspecting'), ('urn:epcglobal:cbv:bizstep:installing', 'urn:epcglobal:cbv:bizstep:installing'), ('urn:epcglobal:cbv:bizstep:killing', 'urn:epcglobal:cbv:bizstep:killing'), ('urn:epcglobal:cbv:bizstep:loading', 'urn:epcglobal:cbv:bizstep:loading'), ('urn:epcglobal:cbv:bizstep:other', 'urn:epcglobal:cbv:bizstep:other'), ('urn:epcglobal:cbv:bizstep:packing', 'urn:epcglobal:cbv:bizstep:packing'), ('urn:epcglobal:cbv:bizstep:picking', 'urn:epcglobal:cbv:bizstep:picking'), ('urn:epcglobal:cbv:bizstep:receiving', 'urn:epcglobal:cbv:bizstep:receiving'), ('urn:epcglobal:cbv:bizstep:removing', 'urn:epcglobal:cbv:bizstep:removing'), ('urn:epcglobal:cbv:bizstep:repackaging', 'urn:epcglobal:cbv:bizstep:repackaging'), ('urn:epcglobal:cbv:bizstep:repairing', 'urn:epcglobal:cbv:bizstep:repairing'), ('urn:epcglobal:cbv:bizstep:replacing', 'urn:epcglobal:cbv:bizstep:replacing'), ('urn:epcglobal:cbv:bizstep:reserving', 'urn:epcglobal:cbv:bizstep:reserving'), ('urn:epcglobal:cbv:bizstep:retail_selling', 'urn:epcglobal:cbv:bizstep:retail_selling'), ('urn:epcglobal:cbv:bizstep:shipping', 'urn:epcglobal:cbv:bizstep:shipping'), ('urn:epcglobal:cbv:bizstep:staging_outbound', 'urn:epcglobal:cbv:bizstep:staging_outbound'), ('urn:epcglobal:cbv:bizstep:stock_taking', 'urn:epcglobal:cbv:bizstep:stock_taking'), ('urn:epcglobal:cbv:bizstep:stocking', 'urn:epcglobal:cbv:bizstep:stocking'), ('urn:epcglobal:cbv:bizstep:storing', 'urn:epcglobal:cbv:bizstep:storing'), ('urn:epcglobal:cbv:bizstep:transporting', 'urn:epcglobal:cbv:bizstep:transporting'), ('urn:epcglobal:cbv:bizstep:unloading', 'urn:epcglobal:cbv:bizstep:unloading'), ('urn:epcglobal:cbv:bizstep:unpacking', 'urn:epcglobal:cbv:bizstep:unpacking'), ('urn:epcglobal:cbv:bizstep:void_shipping', 'urn:epcglobal:cbv:bizstep:void_shipping')], help_text='The business step of which this event was a part.', max_length=150, null=True, verbose_name='Business Step'),
        ),
        migrations.AlterField(
            model_name='event',
            name='disposition',
            field=models.CharField(blank=True, choices=[('urn:epcglobal:cbv:disp:active', 'urn:epcglobal:cbv:disp:active'), ('urn:epcglobal:cbv:disp:container_closed', 'urn:epcglobal:cbv:disp:container_closed'), ('urn:epcglobal:cbv:disp:damaged', 'urn:epcglobal:cbv:disp:damaged'), ('urn:epcglobal:cbv:disp:destroyed', 'urn:epcglobal:cbv:disp:destroyed'), ('urn:epcglobal:cbv:disp:dispensed', 'urn:epcglobal:cbv:disp:dispensed'), ('urn:epcglobal:cbv:disp:disposed', 'urn:epcglobal:cbv:disp:disposed'), ('urn:epcglobal:cbv:disp:encoded', 'urn:epcglobal:cbv:disp:encoded'), ('urn:epcglobal:cbv:disp:expired', 'urn:epcglobal:cbv:disp:expired'), ('urn:epcglobal:cbv:disp:in_progress', 'urn:epcglobal:cbv:disp:in_progress'), ('urn:epcglobal:cbv:disp:in_transit', 'urn:epcglobal:cbv:disp:in_transit'), ('urn:epcglobal:cbv:disp:inactive', 'urn:epcglobal:cbv:disp:inactive'), ('urn:epcglobal:cbv:disp:no_pedigree_match', 'urn:epcglobal:cbv:disp:no_pedigree_match'), ('urn:epcglobal:cbv:disp:non_sellable_other', 'urn:epcglobal:cbv:disp:non_sellable_other'), ('urn:epcglobal:cbv:disp:partially_dispensed', 'urn:epcglobal:cbv:disp:partially_dispensed'), ('urn:epcglobal:cbv:disp:recalled', 'urn:epcglobal:cbv:disp:recalled'), ('urn:epcglobal:cbv:disp:reserved', 'urn:epcglobal:cbv:disp:reserved'), ('urn:epcglobal:cbv:disp:retail_sold', 'urn:epcglobal:cbv:disp:retail_sold'), ('urn:epcglobal:cbv:disp:returned', 'urn:epcglobal:cbv:disp:returned'), ('urn:epcglobal:cbv:disp:sellable_accessible', 'urn:epcglobal:cbv:disp:sellable_accessible'), ('urn:epcglobal:cbv:disp:sellable_not_accessible', 'urn:epcglobal:cbv:disp:sellable_not_accessible'), ('urn:epcglobal:cbv:disp:stolen', 'urn:epcglobal:cbv:disp:stolen'), ('urn:epcglobal:cbv:disp:unknown', 'urn:epcglobal:cbv:disp:unknown')], help_text='The business condition of the objects associated with the EPCs, presumed to hold true until contradicted by a subsequent event..', max_length=150, null=True, verbose_name='Disposition'),
        ),
        migrations.AlterField(
            model_name='event',
            name='event_id',
            field=models.CharField(db_index=True, default=uuid.uuid4, help_text='An identifier for this event as specified by the capturing application, globally unique across all events other than error declarations. Not to be confused with the unique id/primary key for events within a database.', max_length=150, null=True, verbose_name='Event ID'),
        ),
        migrations.AlterField(
            model_name='event',
            name='read_point',
            field=models.CharField(blank=True, help_text='The read point at which the event took place.', max_length=150, null=True, verbose_name='Read Point'),
        ),
    ]
